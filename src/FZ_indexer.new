#include "FZ_indexer.h"

#define _notime

#ifndef _notime
static double part1, part2, part3, part4;
#endif

/************************************************************************/
/*                   BEGIN                                              */
/************************************************************************/

//#include <direct.h>
#include <stdlib.h>
#include <stdio.h>

using namespace std;

typedef pair<string, ID_List*> p1;
typedef pair<unsigned int, GramIndex*> p2;
typedef pair<unsigned int, string> p3;

//	used for split string
void Tokenize(const string& str,vector<string>& tokens,const string& delimiters = " "){
	// Skip delimiters at beginning.
	string::size_type lastPos = str.find_first_not_of(delimiters, 0);
	// Find first “non-delimiter”.
	string::size_type pos = str.find_first_of(delimiters, lastPos);

	while (string::npos != pos || string::npos != lastPos){
		// Found a token, add it to the vector.
		tokens.push_back(str.substr(lastPos, pos - lastPos));
		// Skip delimiters. Note the “not_of”
		lastPos = str.find_first_not_of(delimiters, pos);
		// Find next “non-delimiter”
		pos = str.find_first_of(delimiters, lastPos);
	}
}

/************************************************************************/
/*                    END	                                            */
/************************************************************************/

FZ_Indexer::FZ_Indexer(const char *dataFileName) {
	memcpy(&originDataFileName, &dataFileName, strlen(dataFileName));
#ifndef _notime
	part1 = 0;
	part2 = 0;
	part3 = 0;
	part4 = 0;
#endif
}

FZ_Indexer::~FZ_Indexer() {
	for (LenIndex::iterator it = index.begin(); it != index.end(); it++)
		delete it->second;
	index.clear();
	words.clear();
}

RC FZ_Indexer::Search(const char *query, const unsigned edThreshold, vector<
		unsigned> &results) const {
	vector<ID_List *> vectors;
	vector<unsigned> merge_result;
	Filter(query, vectors, edThreshold);
	int t = strlen(query) + 1 - QGRAM - edThreshold * QGRAM;
	ScanCount(vectors, t, merge_result, words.size());
	for (unsigned i = 0; i < merge_result.size(); i++) {
		if (Refine(query, merge_result[i], edThreshold))
			results.push_back(merge_result[i]);
	}
	return SUCCESS;
}

RC FZ_Indexer::CreateIndex() {
	ifstream fin;
	fin.open(originDataFileName);
	if (!fin) {
		cerr << "Data File Open Error!\n";
		return FAILURE;
	}
	char line[LINE_LENGTH];
	unsigned str_num = 0;
	while (!fin.eof()) {
		fin.getline(line, LINE_LENGTH, '\n');
		if (strlen(line) != 0) {
			string te(line, strlen(line) - 1);
			words[str_num] = te;
			LenIndex::iterator it = index.find(strlen(line) - 1);
			if (it == index.end()) {
				GramIndex* value = new GramIndex();
				line2gram(line, str_num, value);
				index[strlen(line) - 1] = value;
			} else {
				line2gram(line, str_num, it->second);
			}
			str_num++;
		}
	}
	fin.close();
	return SaveIndex();
}

RC FZ_Indexer::SaveIndex(){
	// open the index file
	string indexname(this->originDataFileName);
	indexname.append(".fzindex");
	ofstream ofile(indexname.c_str());
	if(ofile.fail()){
		cout<<"Fail"<<endl;
		return FAILURE;
	}

	// store Dictionary
	ofile << "Dictionary" << endl;
	map<unsigned int, string>::iterator it = words.begin();
	for( ; it!=words.end(); it++){
		ofile << "<p>" << it->first << "|" << it->second  ;
	}
	ofile<<endl;

	// store LenIndex
	map<unsigned int, GramIndex*>::iterator i = index.begin();	// LenIndex
	map<string, ID_List*>::iterator g;							// GramIndex
	vector<unsigned int>::iterator id;							// ID_List
	int vsize;

	ofile << "LenIndex" << endl;
	for( ; i!=index.end(); i++){
		ofile << i->first << "|";
		g = (*(GramIndex*)(i->second)).begin();
		for( ; g!=(*(GramIndex*)(i->second)).end(); g++){
			ofile << "<p>" << g->first << "%%%" ;
			vsize = (*(vector<unsigned int>*)(g->second)).size();
			ofile << vsize ;
			id = (*(ID_List*)(g->second)).begin();
			for( ; id!=(*(ID_List*)(g->second)).end(); id++){
				ofile << "," << *id ;
			}
		}
		ofile << endl;
	}

	return SUCCESS;
}

RC FZ_Indexer::DestroyIndex() {

//	// delete the index file
//	char* buffer;
//	buffer = _getcwd( NULL, 0 );
//	string temp(buffer);
//	temp.append("\\");
//	string indexname(this->originDataFileName);
//	indexname.append(".fzindex");
//	temp.append(indexname);
////	DeleteFileA(indexname.c_str());
//	remove(indexname.c_str());
//
//	// delete the index
//	LenIndex.clear();
//	Dictionary.clear();

#ifndef _notime
	cout << "part1=" << part1 << endl;
	cout << "part2=" << part2 << endl;
	cout << "part3=" << part3 << endl;
	cout << "part4=" << part4 << endl;
#endif
	return SUCCESS;
}

RC FZ_Indexer::LoadIndex() {

	// init
	words.clear();
	index.clear();
	string indexname(this->originDataFileName);
	indexname.append(".fzindex");
	ifstream ifile(indexname);

	// Load Dictionary
	string s;
	vector<string> tokens;
	stringstream* ss;
	unsigned int num;
	char split;
	string url;

	getline(ifile, s);
	getline(ifile, s);

	Tokenize(s,tokens,"<p>");

	for(vector<string>::iterator itt=tokens.begin();itt!=tokens.end();itt++){
		ss = new stringstream(*itt);
		*ss >> num >> split >> url;
		words.insert(p3(num, url));
	}

	// Load LenIndex
	string line;
	stringstream* str;
	unsigned int front ;
	char b;
	string left;
	string gramString;
	vector<string> idlist;
	int listsize;
	unsigned int idvalue;
	char c;
	ID_List* tempidlist;
	GramIndex* tempgram;

	tokens.clear();

	getline(ifile,line);
	while(getline(ifile,line)){
		str = new stringstream(line);
		*str >> front >> b >> left;
		Tokenize(left, tokens, "<p>");
		for(int i=0; i<tokens.size(); i++){
			Tokenize(tokens[i], idlist, "%%%");
			str = new stringstream(idlist[1]);
			*str >> listsize;
			tempidlist = new vector<unsigned int>();
			for(int j=0; j<listsize ;j++){
				*str >> c >> idvalue ;
				tempidlist->push_back(idvalue);
			}
			tempgram = new map<string, ID_List*>();
			tempgram->insert(p1(idlist[0], tempidlist));
		}
		index.insert(p2(front, tempgram));
	}

	return SUCCESS;
}

RC FZ_Indexer::line2gram(char * line, unsigned str_num, GramIndex * child) {
	char key[QGRAM + 1];
	string map_key;
	unsigned length = strlen(line);
	for (unsigned loc = 0; loc < length - QGRAM; loc++) {
		memcpy(key, line + loc, QGRAM);
		key[QGRAM] = 0;
		map_key.assign(key);
		GramIndex::iterator iter = child->find(map_key);
		if (iter == child->end()) {
			ID_List* newvalue = new ID_List();
			newvalue->push_back(str_num);
			child->insert(GramIndex::value_type(map_key, newvalue));
			;
		} else {
			if (iter->second->at(iter->second->size() - 1) != str_num)
				iter->second->push_back(str_num);
		}
	}
	return SUCCESS;
}

void FZ_Indexer::Filter(const char *query, vector<ID_List *> &vectors,
		const unsigned edThreshold) const {
	char key[QGRAM + 1];
	string map_key;
	unsigned length = strlen(query);
	unsigned upbound_i = length + edThreshold + 1;
	for (unsigned i = length - edThreshold; i < upbound_i; i++) {
		LenIndex::iterator it = index.find(i);
		if (it == index.end())
			continue;
		else {
			//			unsigned upbound_loc = length + 1 - QGRAM;
			for (unsigned loc = 0; loc < length + 1 - QGRAM; loc++) {
				memcpy(key, query + loc, QGRAM);
				key[QGRAM] = 0;
				map_key.assign(key);
				GramIndex::iterator iter = it->second->find(map_key);
				if (iter != it->second->end()) {
					vectors.push_back(iter->second);
				}
			}
		}
	}
}

RC FZ_Indexer::Refine(const char *query, unsigned num, unsigned edThreshold) const {
	char queryx[LINE_LENGTH];
	strncpy(queryx, query, LINE_LENGTH);
	string str = words[num];
	char tomatch[str.length() + 1];
	memset(tomatch, 0, strlen(tomatch));
	memcpy(tomatch, str.c_str(), strlen(str.c_str()));
	tomatch[str.length()] = 0;
	unsigned qlength = strlen(queryx) + 1;
	unsigned tlength = strlen(tomatch) + 1;
	if (abs((int) qlength - (int) tlength) > (int) edThreshold)
		return FAILURE;
	unsigned ** flag = new unsigned *[qlength];
	unsigned i = 0, j = 0;
	for (i = 0; i < qlength; i++) {
		flag[i] = new unsigned[tlength];
	}
	for (i = 1; i < qlength; i++)
		for (j = 1; j < tlength; j++)
			flag[i][j] = 0;
	for (i = 0; i < qlength; i++)
		flag[i][0] = i;
	for (j = 0; j < tlength; j++)
		flag[0][j] = j;
	unsigned t = 0;
	for (i = 1; i < qlength; i++)
		for (j = 1; j < tlength; j++) {
			if (queryx[i - 1] == tomatch[j - 1])
				t = 0;
			else
				t = 1;
			t += flag[i - 1][j - 1];
			if (flag[i - 1][j] + 1 < t)
				t = flag[i - 1][j] + 1;
			if (flag[i][j - 1] + 1 < t)
				t = flag[i][j - 1] + 1;
			flag[i][j] = t;
		}
	if (flag[qlength - 1][tlength - 1] > edThreshold) {
		for (i = 0; i < qlength; i++)
			delete[] flag[i];
		delete[] flag;
		return FAILURE;
	}
	for (i = 0; i < qlength; i++)
		delete[] flag[i];
	delete[] flag;
	return SUCCESS;
}

typedef struct {
	vector<vector<unsigned>*> *sublist;
	unsigned *count;
} SCargs;

pthread_mutex_t count_mutex = PTHREAD_MUTEX_INITIALIZER;

void *scancount(void *x) {
	pthread_mutex_lock(&count_mutex);
	SCargs args;
	memcpy(&args, x, sizeof(args));
	unsigned sublistsize = args.sublist->size();
	for (unsigned i = 0; i < sublistsize; i++) {
		unsigned sublist_j_size = args.sublist->at(i)->size();
		for (unsigned j = 0; j < sublist_j_size; j++) {
			args.count[args.sublist->at(i)->at(j)]++;
		}
	}
	pthread_mutex_unlock(&count_mutex);
	pthread_exit(NULL);
}

void FZ_Indexer::ScanCount(vector<ID_List *> lists, int T,
		vector<unsigned> &result, unsigned size) {
	result.clear();

	//single-thread
	unsigned *count = new unsigned[size];
	for (unsigned i = 0; i < size; i++)
		count[i] = 0;
	//		memset(count, 0, sizeof(unsigned) * size);

	for (unsigned i = 0; i < lists.size(); i++) {
		for (unsigned j = 0; j < lists[i]->size(); j++) {
			count[lists[i]->at(j)]++;
		}
	}

	//multi-thread

	//	unsigned threads = 2;
	//	SCargs *args = new SCargs[threads];
	//
	//	for (unsigned i = 0; i < threads; i++) {
	//		vector<vector<unsigned> *> *sublist = new vector<vector<unsigned> *> ();
	//		int factor = lists.size() / threads;
	//		for (unsigned j = factor * i; j < factor * (i + 1); j++)
	//			sublist->push_back(lists.at(j));
	//		if (i == threads - 1)
	//			for (unsigned j = factor * (i + 1); j < lists.size(); j++)
	//				sublist->push_back(lists.at(j));
	//		args[i].sublist = sublist;
	//		args[i].count = count;
	//	}
	//	pthread_t handles[threads];
	//	for (unsigned i = 0; i < threads; i++)
	//		pthread_create(&handles[i], NULL, scancount, args + i);
	//	for (unsigned i = 0; i < threads; i++)
	//		pthread_join(handles[i], NULL);

	for (unsigned i = 0; i < size; i++) {
		if ((int) (count[i]) >= T)
			result.push_back(i);
	}
	delete[] count;
}
